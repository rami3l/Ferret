import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'application'
    // lombok (generation of getters, setters, constructors, builders, etc.)
    id 'io.freefair.lombok' version '6.4.2'
}

group = 'fr.ferret'
version = '3.0.0-alpha3'
description = 'A user-friendly tool to extract data from the 1000 Genomes Project.'

repositories {
    mavenCentral()
}

dependencies {
    // Stream adapters and advanced data structures.
    // https://mvnrepository.com/artifact/com.google.guava/guava
    implementation 'com.google.guava:guava:31.1-jre'

    /** PARSING **/
    // Library used to deal with CSV/TSV files
    // https://mvnrepository.com/artifact/com.opencsv/opencsv
    implementation 'com.opencsv:opencsv:5.6'
    // Library used to parse json
    implementation 'com.jayway.jsonpath:json-path:2.7.0'

    // Library used to deal with files in the 1000 Genomes Extended VCF Format
    // https://mvnrepository.com/artifact/com.github.samtools/htsjdk
    implementation 'com.github.samtools:htsjdk:2.24.1'

    // Library used for asynchronous operations
    // https://mvnrepository.com/artifact/io.projectreactor/reactor-core
    implementation 'io.projectreactor:reactor-core:3.4.16'

    /** CONFIGURATION PERSISTENCE **/
    // Configuration managing lib
    // https://mvnrepository.com/artifact/org.spongepowered/configurate-core
    implementation 'org.spongepowered:configurate-core:4.1.2'
    // HOCON loader for `configurate-core`
    // https://mvnrepository.com/artifact/org.spongepowered/configurate-hocon
    implementation 'org.spongepowered:configurate-hocon:4.1.2'

    // Convenient interfaces for throwing functions
    // https://mvnrepository.com/artifact/com.pivovarit/throwing-function
    implementation 'com.pivovarit:throwing-function:1.5.1'


    /** TESTS */
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'
    // https://mvnrepository.com/artifact/io.projectreactor/reactor-test
    testImplementation 'io.projectreactor:reactor-test:3.4.17'
    // Assertions
    // https://mvnrepository.com/artifact/org.assertj/assertj-core
    testImplementation 'org.assertj:assertj-core:3.22.0'
    // https://mvnrepository.com/artifact/org.awaitility/awaitility
    testImplementation 'org.awaitility:awaitility:4.2.0'
}

test {
    useJUnitPlatform()
}

ext {
    javaMainClass = "fr.ferret.FerretMain"
}

application {
    mainClass = javaMainClass
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
  duplicatesStrategy = DuplicatesStrategy.WARN

  manifest {
    attributes(
      'Main-Class': javaMainClass
    )
  }

  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  } {
    exclude 'META-INF/*.RSA', 'META-INF/*.SF', 'META-INF/*.DSA'
  }
}

// Tasks

defaultTasks 'build'

tasks.javadoc.doFirst {
    println 'Exporting javadoc under `./build/docs/javadoc`...'
}

tasks.build.doFirst {
    println 'Building...'
}

tasks.run.doFirst {
    println 'Running...'
}

tasks.test.doFirst {
    println 'Testing...'
}

tasks.jar.doFirst {
    println 'Generating jar under `./build/libs`'
}

task javadocOpen(type:Exec) {
    dependsOn 'javadoc'
    description 'Opens javadoc.'

    workingDir './build/docs/javadoc'

    // Let Linux be the default case.
    commandLine 'xdg-open', 'index.html'
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        workingDir System.getProperty("user.dir") + '/build/docs/javadoc'
        commandLine 'pwsh', '-Command', 'Invoke-Item index.html'
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        commandLine 'open', 'index.html'
    }
}
