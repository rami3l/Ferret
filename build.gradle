import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'application'
    // lombok (generation of getters, setters, constructors, builders, etc.)
    id 'io.freefair.lombok' version '6.4.1'
}

group = 'fr.ferret'
version = '1.0-SNAPSHOT'
description = 'A user-friendly tool to extract data from the 1000 Genomes Project.'

repositories {
    mavenCentral()
}

dependencies {
    // Stream adapters and advanced data structures.
    // https://mvnrepository.com/artifact/com.google.guava/guava
    implementation 'com.google.guava:guava:31.1-jre'

    // Library used to deal with CSV/TSV files
    // https://mvnrepository.com/artifact/com.opencsv/opencsv
    implementation 'com.opencsv:opencsv:5.6'

    // Library used to parse json
    implementation 'com.jayway.jsonpath:json-path:2.7.0'

    // Library used to deal with files in the 1000 Genomes Extended VCF Format
    // https://mvnrepository.com/artifact/com.github.samtools/htsjdk
    implementation 'com.github.samtools:htsjdk:2.24.1'

    // Library used for asynchronous operations
    // https://mvnrepository.com/artifact/io.projectreactor/reactor-core
    implementation 'io.projectreactor:reactor-core:3.4.15'

    // Convenient interfaces for throwing functions
    // https://mvnrepository.com/artifact/com.pivovarit/throwing-function
    implementation 'com.pivovarit:throwing-function:1.5.1'

    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'

    // https://mvnrepository.com/artifact/io.projectreactor/reactor-test
    testImplementation 'io.projectreactor:reactor-test:3.4.15'

    // https://mvnrepository.com/artifact/org.awaitility/awaitility
    testImplementation 'org.awaitility:awaitility:4.2.0'
}

test {
    useTestNG()
}

ext {
    javaMainClass = "fr.ferret.FerretMain"
}

application {
    mainClass = javaMainClass
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
  manifest {
    attributes(
      'Main-Class': javaMainClass
    )
  }
}

// Tasks

defaultTasks 'build'

tasks.javadoc.doFirst {
    println 'Exporting javadoc under `./build/docs/javadoc`...'
}

tasks.build.doFirst {
    println 'Building...'
}

tasks.run.doFirst {
    println 'Running...'
}

tasks.test.doFirst {
    println 'Testing...'
}

tasks.jar.doFirst {
    println 'Generating jar under `./build/libs`'
}

task javadocOpen(type:Exec) {
    dependsOn 'javadoc'
    description 'Opens javadoc.'

    workingDir './build/docs/javadoc'

    // Let Linux be the default case.
    commandLine 'xdg-open', 'index.html'
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        workingDir System.getProperty("user.dir") + '/build/docs/javadoc'
        commandLine 'pwsh', '-Command', 'Invoke-Item index.html'
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        commandLine 'open', 'index.html'
    }
}
