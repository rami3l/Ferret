/*
 * This file was generated by the Gradle 'init' task.
 */

import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'java'
    id 'maven-publish'
    id 'application'
    // lombok (generation of getters, setters, constructors, builders, etc.)
    id 'io.freefair.lombok' version '6.3.0'
}

ext {
    versions = [
            'junit': '5.8.2',
            'guava': '31.0.1-jre',
            'htsjdk': '2.24.1',
            'reactor': '3.4.15',
            'awaitility': '4.1.1'
    ]
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
    mavenCentral()
}

group = 'fr.ferret'
version = '1.0-SNAPSHOT'
description = 'NewFerret'

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

apply plugin : "java" 
ext {
   javaMainClass = "fr.ferret.FerretMain"
}

java {
  sourceCompatibility = JavaVersion.VERSION_17
  targetCompatibility = JavaVersion.VERSION_17
}


dependencies {

    // This dependency is used by the application.
    implementation(group: 'com.google.guava', name: 'guava', version: versions['guava'])

    // https://mvnrepository.com/artifact/com.github.samtools/htsjdk
    implementation(group: 'com.github.samtools', name: 'htsjdk', version: versions['htsjdk'])

    // Use reactor for asynchronous operations
    implementation(group: 'io.projectreactor', name: 'reactor-core', version: versions['reactor'])

    // Use JUnit Jupiter, reactor-test and awaitility for testing.
    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter', version: versions['junit'])
    testImplementation(group: 'io.projectreactor', name: 'reactor-test', version: versions['reactor'])
    testImplementation(group: 'org.awaitility', name: 'awaitility', version: versions['awaitility'])
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

application {
    mainClass.set(javaMainClass)
}

jar {
  manifest {
    attributes(
      'Main-Class': javaMainClass
    )
  }
}

// Tasks

defaultTasks 'build'

tasks.javadoc.doFirst {
    println 'Exporting javadoc under `./build/docs/javadoc`...'
}

tasks.build.doFirst {
    println 'Building...'
}

tasks.run.doFirst {
    println 'Running...'
}

tasks.test.doFirst {
    println 'Testing...'
}

tasks.jar.doFirst {
    println 'Generating jar under `./build/libs`'
}

task javadocOpen(type:Exec) {
    dependsOn 'javadoc'
    description 'Opens javadoc.'

    workingDir './build/docs/javadoc'

    // Let Linux be the default case.
    commandLine 'xdg-open', 'index.html'
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        workingDir System.getProperty("user.dir") + '/build/docs/javadoc'
        commandLine 'pwsh', '-Command', 'Invoke-Item index.html'
    } else if (Os.isFamily(Os.FAMILY_MAC)) {
        commandLine 'open', 'index.html'
    }
}
